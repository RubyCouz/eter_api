security:
    # encoders : définition ds methodes d'encodage des mdp
    encoders:
        App\Entity\EterUser:
            algorithm: bcrypt
            cost: 12
    #L'admin a aussi les droit de l'utilisateur
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    # provider : permet d'indiquer comment on récupère les utilisateurs et les authentifications
    providers:
        from_database:
            entity:
                class: App\Entity\EterUser
                property: user_mail
    # firewalls : définit les composant qui vont permettre l'authentification
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        register:
            pattern:  ^/api/register
            stateless: true
            anonymous: true
        api:
            pattern:  ^/api
            stateless: true
            anonymous: true
            provider: from_database
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            anonymous: lazy
            provider: from_database
    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/api/eter_user, role: ROLE_ADMIN, methods: ["GET","DELETE"], requires_channel: https}
        - { path: ^/api, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }